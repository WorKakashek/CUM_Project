generator client {
    provider = "prisma-client-js" //обьясняем что работаем с JS
}

datasource db {
    provider  = "postgresql" // какая база данных
    url       = env("DATABASE_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())

    fullName    String
    email       String   @unique
    password    String
    role        UserRole @default(USER)
    verificated DateTime

    provider   String?
    providerId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Cart             Cart? // связь one to one с Cart
    Order            Order[]
    VerificationCode VerificationCode[]
}

model ThreeModel {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String
    price    Int
    Model    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ThreeModelCategory   ThreeModelCategory @relation(fields: [threeModelCategoryId], references: [id])
    threeModelCategoryId Int
    Filters              Filters?           @relation(fields: [filtersId], references: [id])
    filtersId            Int?

    CartItem CartItem[]
}

model ThreeModelCategory {
    id   Int    @id @default(autoincrement())
    name String

    threemodel ThreeModel[] // связь one to many с ThreeModel
}

model Filters {
    id   Int    @id @default(autoincrement())
    name String

    cart       Cart[]
    threeModel ThreeModel[]
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    totalAmount Int        @default(0)
    cartItem    CartItem[]
    token       String? //если пользователь будет не зарегистрирован

    Filters   Filters? @relation(fields: [filtersId], references: [id])
    filtersId Int?
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productItem   ThreeModel @relation(fields: [productItemId], references: [id])
    productItemId Int

    quantity Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token       String
    totalAmount Int

    status OrderStatus

    paymentId String?

    items Json

    fullName String
    email    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
